 ==============================
 How to use 2-matrix_divided.py
 ==============================
 This module defines a matrix division function ``matrix_divided(matrix, div)``.

 Usage
 =====

 ``matrix_divided`` returns a new matrix that is a copy of its parameter.
 ``matrix`` with all element divided by ``div`` reuturns a rounded value with two decimal place.

 ::
	>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
	>>> matrix = [
	...	[1, 2, 3],
	...	[4, 5, 6]
	... ]
	>>> print(matrix_divided(matrix, 3))
	[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]
 
 It print out the output in rounded two decimal place.


 :: 

	>>> matrix = []
	>>> print(matrix_divided(matrix, 3))
	Traceback (most recent call last):
		...	
	TypeError: matrix must be a matrix (list of lists) of integer/float

 An empty list of matrix will raised a TypeError.
	
 ::

	>>> print(matrix)
	[[1, 2, 3], [4, 5, 6]]

 Matrix output remained unchanged

 :: 

	>>> matrix = [
	...	[2.1, 3.5, 4.2],
	...	[5.2, 6.4, 7.6]
	... ]
	>>> print(matrix_divided(matrix, 2))
	[[1.05, 1.75, 2.1], [2.6, 3.2, 3.8]]
 
 Working with float-point number which is acceptable.


 :: 

	>>> matrix = [
	...	[2.1, 1, 3, 4],
	...	[4, 8, 5.6]
	... ]
	>>> print(matrix_divided(matrix, 3))
	Traceback (most recent call last):
		...
	TypeError: Each row of the matrix must have the same size 



 The row of the matrix must be the same,if any row has a different sizes, 
 a TypeError would be raised.


 ::

 
	>>> matrix = [
	...	[1, 4, 4],
	...	[2, "alx", 6]
	... ]
	>>> print(matrix_divided(matrix, 3))
	Traceback (most recent call last):
		...
	TypeError: matrix must be a matrix (list of lists) integers/float.

 The TypeError is displayed when a list contain an element that is not
 a integer/floats.

 ::


	>>> matrix = [
	...	[1, -3.4, 5, 4.4],
	... 	[6.6, 8, 10, 9.2]
	... ]
	>>> print(matrix_divided(matrix, 3))
	[[0.33, -1.13, 1.66, 1.46], [2.2, 2.6, 3.33, 3.06]]

 Integers and float combined.


 Invalid Divisors
 =================


 The parameter ``div`` must be either an integer or float else a TypeError 
 is raised.

 ::

	>>> matrix = [
	... 	[1, 2, 5],
	...	[4, 6, 7]
	... ]
	>>> print(matrix_divided(matrix, 'num'))
	Traceback (most recent call last):
		...
	TypeError: div must be an integer/float


 ::


	>>> print(matrix_divided(matrix, None))
	Traceback (most recent call last):
		...
	TypeError: div must be an integer/float


 The parameter ``div `` must be a non-zero. Otherwise, a ZeroDivision is raised

 ::


	>>> print(matrix_divided(matrix, 0))
	Traceback (most recent call last):
		...
	ZeroDivisionError: division by zero 
